version: '3.8'

services:
  # Infrastructure
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-trading_bot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TypeScript Services
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://redis:6379
      - PORT=3000
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  x-monitoring:
    build:
      context: .
      dockerfile: apps/x-monitoring/Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-trading_bot}
      - X_BEARER_TOKEN=${X_BEARER_TOKEN}
      - X_ACCOUNTS_TO_MONITOR=${X_ACCOUNTS_TO_MONITOR}
      - MONITORING_INTERVAL=${MONITORING_INTERVAL:-5000}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  trading-orchestrator:
    build:
      context: .
      dockerfile: apps/trading-orchestrator/Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-trading_bot}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.80}
      - MAX_POSITION_SIZE=${MAX_POSITION_SIZE:-0.05}
      - MAX_PORTFOLIO_EXPOSURE=${MAX_PORTFOLIO_EXPOSURE:-0.20}
      - PAPER_TRADING_MODE=${PAPER_TRADING_MODE:-true}
      - SOLANA_PRIVATE_KEY=${SOLANA_PRIVATE_KEY}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  notification-service:
    build:
      context: .
      dockerfile: apps/notification-service/Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://redis:6379
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    depends_on:
      - redis
    restart: unless-stopped

  # Python Services
  ai-analysis:
    build:
      context: .
      dockerfile: apps/ai-analysis/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-trading_bot}
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 